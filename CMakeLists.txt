cmake_minimum_required(VERSION 3.21 FATAL_ERROR)

if ("${APP_VERSION}" STREQUAL "")
	set(APP_VERSION "0.0.0" CACHE STRING "App version" FORCE)
endif()

project(txt2gam VERSION ${APP_VERSION} HOMEPAGE_URL "https://qsp.org")

include(CMakePackageConfigHelpers)
include(GenerateExportHeader)
include(GNUInstallDirs)

set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_BUILD_RPATH_USE_ORIGIN ON)
set(CMAKE_INSTALL_RPATH_USE_LINK_PATH ON)
set(CMAKE_POSITION_INDEPENDENT_CODE ON)
set(CMAKE_VISIBILITY_INLINES_HIDDEN ON)

if ("${CMAKE_C_COMPILER_ID}" STREQUAL "GNU")
	set(PROJECT_COMPILER_FLAGS "-Wall")
	set(PROJECT_LINKER_FLAGS "")
	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -Wno-char-subscripts -Wno-unused-variable")
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra")
	set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -g -D_DEBUG -DDEBUG")
	set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -g -D_DEBUG -DDEBUG")
	set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -Ofast -DNDEBUG")
	set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -Ofast -DNDEBUG")
elseif ("${CMAKE_C_COMPILER_ID}" STREQUAL "MSVC")
	set(PROJECT_COMPILER_FLAGS "/W4")
	set(PROJECT_LINKER_FLAGS "")
	set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} /D_DEBUG /DDEBUG")
	set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /D_DEBUG /DDEBUG")
	set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} /O2 /DNDEBUG")
	set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /O2 /DNDEBUG")
	set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
elseif ("${CMAKE_C_COMPILER_ID}" STREQUAL "Clang" OR "${CMAKE_C_COMPILER_ID}" STREQUAL "AppleClang")
	set(PROJECT_COMPILER_FLAGS "")
	set(PROJECT_LINKER_FLAGS "")
	set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -g -D_DEBUG -DDEBUG")
	set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -g -D_DEBUG -DDEBUG")
	set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -Ofast -DNDEBUG")
	set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -Ofast -DNDEBUG")
else()
	message(FATAL_ERROR "Compiler is not supported")
endif()

option(USE_INSTALLED_ONIGURUMA "Use system-wide oniguruma library instead of bundling it" OFF)

if (USE_INSTALLED_ONIGURUMA)
	find_package(oniguruma REQUIRED)
else()
	# Download and unpack oniguruma at configure time
	configure_file(CMakeLists-oniguruma.txt.in "${CMAKE_BINARY_DIR}/oniguruma-download/CMakeLists.txt")
	execute_process(COMMAND "${CMAKE_COMMAND}" -G "${CMAKE_GENERATOR}" .
			WORKING_DIRECTORY "${CMAKE_BINARY_DIR}/oniguruma-download"
	)
	execute_process(COMMAND "${CMAKE_COMMAND}" --build .
			WORKING_DIRECTORY "${CMAKE_BINARY_DIR}/oniguruma-download"
	)

	# Disable oniguruma features we don't need
	set(INSTALL_DOCUMENTATION OFF)
	set(INSTALL_EXAMPLES OFF)
	set(BUILD_TEST OFF)
	set(BUILD_SHARED_LIBS OFF)
	set(MSVC_STATIC_RUNTIME ON)

	# For Windows: Prevent overriding the parent project's compiler/linker settings
	set(oniguruma_force_shared_crt ON CACHE BOOL "" FORCE)

	# Configure the CRNL handling
	add_compile_definitions(USE_CRNL_AS_LINE_TERMINATOR=1)

	# Add oniguruma directly to our build
	set(CMAKE_POLICY_DEFAULT_CMP0063 NEW)
	set(CMAKE_POLICY_DEFAULT_CMP0077 NEW)
	add_subdirectory("${CMAKE_BINARY_DIR}/oniguruma-src"
			"${CMAKE_BINARY_DIR}/oniguruma-build"
	)
	add_library(oniguruma::onig ALIAS onig)
endif()

configure_file(txt2gam_config.h.cmakein txt2gam_config.h @ONLY)

set(TXT2GAM_SOURCES
	src/coding.c
	src/locations.c
	src/locdata.c
	src/main.c
	src/memwatch.c
	src/text.c
)
add_executable(txt2gam ${TXT2GAM_SOURCES})

if (WIN32)
	target_compile_definitions(txt2gam PRIVATE _CRT_SECURE_NO_WARNINGS)
	set_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT txt2gam)
endif()
target_compile_definitions(txt2gam PRIVATE _UNICODE)
if (SPEC_PASS)
	target_compile_definitions(txt2gam PRIVATE SPEC_PASS=${SPEC_PASS})
endif()
target_compile_options(txt2gam PRIVATE ${PROJECT_COMPILER_FLAGS})
target_link_options(txt2gam PRIVATE ${PROJECT_LINKER_FLAGS})
target_link_libraries(txt2gam PRIVATE oniguruma::onig)

# Installation

if (WIN32)
	set(BINDIR ${CMAKE_INSTALL_BINDIR})
	set(LIBDIR ${CMAKE_INSTALL_LIBDIR})
	set(RLIBDIR ${CMAKE_INSTALL_BINDIR})
	set(HEADERDIR ${CMAKE_INSTALL_INCLUDEDIR})
	set(DATADIR ${CMAKE_INSTALL_BINDIR})
	set(INSTALL_RPATH "")
elseif (APPLE)
	set(BINDIR ${CMAKE_INSTALL_BINDIR})
	set(LIBDIR ${CMAKE_INSTALL_LIBDIR})
	set(RLIBDIR ${CMAKE_INSTALL_LIBDIR})
	set(HEADERDIR ${CMAKE_INSTALL_INCLUDEDIR})
	set(DATADIR ${CMAKE_INSTALL_DATADIR}/txt2gam)
	set(INSTALL_RPATH "@loader_path;@loader_path/../${CMAKE_INSTALL_LIBDIR}")
elseif (UNIX)
	set(BINDIR ${CMAKE_INSTALL_BINDIR})
	set(LIBDIR ${CMAKE_INSTALL_LIBDIR})
	set(RLIBDIR ${CMAKE_INSTALL_LIBDIR})
	set(HEADERDIR ${CMAKE_INSTALL_INCLUDEDIR})
	set(DATADIR ${CMAKE_INSTALL_DATADIR}/txt2gam)
	set(INSTALL_RPATH "$ORIGIN;$ORIGIN/../${CMAKE_INSTALL_LIBDIR}")
else()
	message(FATAL_ERROR "Platform is not supported")
endif()

set_target_properties(txt2gam PROPERTIES INSTALL_RPATH "${INSTALL_RPATH}")
install(TARGETS txt2gam
		RUNTIME DESTINATION ${BINDIR}
		LIBRARY DESTINATION ${RLIBDIR}
		ARCHIVE DESTINATION ${LIBDIR}
		PRIVATE_HEADER DESTINATION ${HEADERDIR}
		PUBLIC_HEADER DESTINATION ${HEADERDIR})

# Packaging

if (WIN32)
	set(CPACK_PACKAGE_NAME "TXT2GAM")
else()
	set(CPACK_PACKAGE_NAME "${CMAKE_PROJECT_NAME}")
endif()
set(CPACK_PACKAGE_FILE_NAME "${CMAKE_PROJECT_NAME}-${CMAKE_PROJECT_VERSION}-${CMAKE_SYSTEM_NAME}")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "TXT2GAM tool to convert text files to QSP game files and vice versa")
set(CPACK_PACKAGE_VENDOR "QSP Foundation")
set(CPACK_PACKAGE_CONTACT "byte@qsp.org")
set(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/LICENSE")
set(CPACK_RESOURCE_FILE_README "${CMAKE_CURRENT_SOURCE_DIR}/README.md")

set(CPACK_VERBATIM_VARIABLES ON)
set(CPACK_STRIP_FILES ON)
set(CPACK_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS
		OWNER_READ OWNER_WRITE OWNER_EXECUTE
		GROUP_READ GROUP_EXECUTE
		WORLD_READ WORLD_EXECUTE
)
set(CPACK_DEBIAN_FILE_NAME DEB-DEFAULT)
set(CPACK_DEBIAN_PACKAGE_SHLIBDEPS ON)

set(CPACK_PACKAGE_EXECUTABLES txt2gam "TXT2GAM")
set(CPACK_CREATE_DESKTOP_LINKS txt2gam)
set(CPACK_NSIS_INSTALLED_ICON_NAME "${BINDIR}\\txt2gam.exe")
set(CPACK_NSIS_ENABLE_UNINSTALL_BEFORE_INSTALL ON)
set(CPACK_NSIS_MODIFY_PATH ON)
set(CPACK_NSIS_MANIFEST_DPI_AWARE ON)
set(CPACK_DMG_DISABLE_APPLICATIONS_SYMLINK ON)

set(CPACK_COMPONENTS_GROUPING ALL_COMPONENTS_IN_ONE)
set(CPACK_ARCHIVE_COMPONENT_INSTALL ON)

include(CPack)
